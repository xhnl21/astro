---
// import Welcome from '../components/Welcome.astro';
import Layout from '../layouts/Layout.astro';
import Line from '../components/graphic/line.vue';
import LineChart from '../components/graphic/lineChart.vue';
import Bar from '../components/graphic/bar.vue';
import Donus from '../components/graphic/donus.vue';
import Treemap from '../components/graphic/treemap.vue';

// Welcome to Astro! Wondering what to do next? Check out the Astro documentation at https://docs.astro.build
// Don't want to use any of this? Delete everything in this file, the `assets`, `components`, and `layouts` directories, and start fresh.
---
<Layout title="Dashborad" >
	<!-- <Welcome /> -->
	<div class="grid grid-cols-12 gap-4 md:gap-6 2xl:gap-7.5">
		<div class="col-span-12 rounded-sm px-5 p-7.5 pb-5 sm:px-7.5 xl:col-span-12">
			<div class="w-full bg-white rounded-lg shadow dark:bg-gray-800 p-4 md:p-6">
				<div class="-ml-5 px-5">
					<main class="p-4">
						<form id="test-form" class="space-y-6">
							<div>
								<label for="value" class="block text-sm font-medium leading-6 text-gray-900 dark:text-gray-50">
									Value
								</label>
								<div class="mt-2">
									<input
										type="text"
										name="value"
										id="value"
										class="block w-full rounded-md border-0 px-3 py-1.5 text-gray-900 shadow-sm outline-none ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-indigo-600 dark:bg-white/5 dark:text-gray-50 dark:ring-white/10 dark:focus:ring-indigo-500 sm:text-sm sm:leading-6"
										placeholder="test"
										required
									/>
								</div>
							</div>
							<button
								type="submit"
								class="rounded-md bg-indigo-600 px-3 py-2 text-sm font-semibold text-gray-50 shadow-sm hover:bg-indigo-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600 dark:bg-indigo-500 dark:hover:bg-indigo-400 dark:focus-visible:outline-indigo-500">
								Submit
							</button>
						</form>
					</main>
					<div class="overflow-x-auto">
						<table class="w-full text-sm text-left">
							<thead class="text-xs text-gray-700 uppercase bg-gray-50 dark:bg-gray-700 dark:text-gray-400">
								<tr>
									<th>ID</th>
									<th>Valor</th>
									<th>Action</th>
								</tr>
							</thead>
							<tbody id="table"></tbody>
						</table>
					</div>
				</div>
			</div>
		</div>	
	</div>	
	<div class="grid grid-cols-12 gap-4 md:gap-6 2xl:gap-7.5">
		<div class="col-span-12 rounded-sm px-5 pt-7.5 pb-5 sm:px-7.5 xl:col-span-6">
			<div class="w-full bg-white rounded-lg shadow dark:bg-gray-800 p-4 md:p-6">
				<div class="-ml-5">
					<LineChart client:only />
				</div>
			</div>
		</div>
		<div class="col-span-12 rounded-sm px-5 p-7.5 pb-5 sm:px-7.5 xl:col-span-6">
			<div class="w-full bg-white rounded-lg shadow dark:bg-gray-800 p-4 md:p-6">
				<div class="-ml-5">
					<Bar client:only />
				</div>
			</div>
		</div>
		<div class="col-span-12 rounded-sm px-5 pt-7.5 pb-5 sm:px-7.5 xl:col-span-6">
			<div class="w-full bg-white rounded-lg shadow dark:bg-gray-800 p-4 md:p-6">
				<div class="-ml-5">
					<Donus client:only />
				</div>
			</div>
		</div>
		<div class="col-span-12 rounded-sm px-5 p-7.5 pb-5 sm:px-7.5 xl:col-span-6">
			<div class="w-full bg-white rounded-lg shadow dark:bg-gray-800 p-4 md:p-6">
				<div class="-ml-5">
					<Line client:only />
				</div>
			</div>
		</div>						
	</div>
	<div class="grid grid-cols-12 gap-4 md:gap-6 2xl:gap-7.5">
		<div class="col-span-12 rounded-sm px-5 p-7.5 pb-5 sm:px-7.5 xl:col-span-12">
			<div class="w-full bg-white rounded-lg shadow dark:bg-gray-800 p-4 md:p-6">
				<div class="-ml-5">
					<Treemap client:only />
				</div>
			</div>
		</div>	
	</div>	
</Layout>
<script>
	const formElement = document.getElementById('test-form') as HTMLFormElement;
	if (formElement) {
		formElement.addEventListener('submit', async function(e) {
			e.preventDefault();
			const formData = new FormData();
			const valueElement = document.getElementById('value') as HTMLInputElement | null;
			let value;
			if (valueElement) {
				value = valueElement.value;
			} else {
				console.error("Value element not found");
				return;
			}
			formData.append("value", value.toString());
			const response = await fetch("api/items", {
				method: "POST",
				body: formData,
			});
			const data = await response.json();
			// console.log(data.status);
			if (data.status === 200){
				location.reload();
			} else {
				console.error("Error");
			}
    	});
	}
	function del(id: number) {
		fetch('api/items?id=' + id, {
			method: "DELETE",
		}).then((data) => {
			console.log(data.status);
			location.reload();
		});
	}
	async function get() {
		try {
			const response = await fetch('api/items', { // Aseg√∫rate de que la ruta sea correcta
				method: "GET",
			});
			if (!response.ok) {
				throw new Error('Network response was not ok');
			}
			const comentarios: { data: { id: number, value: string }[] } = await response.json(); // Convierte la respuesta a JSON
			// console.log(comentarios.data);
			const table = document.getElementById('table');
			let innerHTML = '';
			if (comentarios.data.length === 0) {
				innerHTML += `<tr><td colspan="3">No hay comentarios</td></tr>`;				
				if (table) {
					table.innerHTML = innerHTML;
				}
			}
			if (table) {
				comentarios.data.forEach(({ id, value }) => {
					innerHTML += `<tr>
						<td>${id}</td>
						<td>${value}</td>
						<td>
							<button class="delete-button text-red-600 hover:underline" data-id="${id}">Delete</button>
						</td>
					</tr>`;
				});
				table.innerHTML = innerHTML;

				table.querySelectorAll('.delete-button').forEach((button) => {
					button.addEventListener('click', () => {
						const id = (button as HTMLButtonElement).dataset.id;
						if (id) del(Number(id));
					});
				});
			}
		} catch (error) {
			console.error('Error fetching data:', error);
		}
	}	
	get()	
</script>